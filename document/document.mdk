[INCLUDE=presentation]
Title         : Powtórka tematów z AiSDu
Sub Title     : Szybki review
Author        : Damian Trojnar
Affiliation   : UWr
Email         : trojnar.damian@gmail.com
Reveal Theme  : solarized
Beamer Theme  : singapore

[TITLE]

# Materiał

[TOC]

##Kopiec:
* [Definicja](https://pl.wikipedia.org/wiki/Kopiec_(informatyka).
* Procedury przywracające porządek kopcowy: 
  * Insert - wstaw na koniec, przywracaj porzadek do góry
  * Delete-min - wywal, wstaw z końca, przywracaj w dół
* Zastosowania: 
 * [heapsort](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/MIT6_006F11_lec04.pdf)
 * [kolejka priorytetowa](https://pl.wikipedia.org/wiki/Kolejka_priorytetowa)
 * [Podwójna kolejka priorytetowa](https://en.wikipedia.org/wiki/Min-max_heap)
 
[Succinct explaination](http://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html)

[Other good presentation](http://courses.cs.washington.edu/courses/cse373/06sp/handouts/lecture10.pdf)

[Budowanie w O(n)](http://www.cs.umd.edu/~meesh/351/mount/lectures/lect14-heapsort-analysis-part.pdf)

## Algorytmy zachłanne:

* [Rozmienianie pieniędzy.](https://crypto.stanford.edu/~zhandry/2012-Summer-CS161/docs/lectures/06-Greedy-1.pdf) 
 * [Optimal Bounds for the ChangeMaking
Problem](http://www.cs.cornell.edu/~kozen/papers/change.pdf)
* [Algorytmy dla problemu MST:](https://www.ics.uci.edu/~eppstein/161/960206.html) 
 * Algorytm Prima 
 * Algorytm Kruskala 
 * Algorytm Boruvki 
* [Problem pokrycia zbioru](http://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf)
 * [Algorytm O(logn ) aproksymacyjny](http://www.cs.cmu.edu/~avrim/451f12/lectures/lect1106.pdf) 



~~ Notes
Oh hey, these are some notes. They'll be hidden in your presentation, but you
can see them if you open the speaker notes window (hit 's' on your keyboard).
~~

## Code

Here is code, highlighted by Madoko 

``` javascript
function sqr( x ) {
  var \(&pi;\) = 3.141593;
  return x*x;  /* the square */
}
```
We used `\(` and `\)` to escape into markdown to write &pi;.

<!-- Example of nested vertical slides -->
~ Begin Vertical { data-background=Gainsboro }

## Vertical Slides {#vertical}
Slides can be nested inside of other slides,
try pressing [down].

[![arrowdown]][down]


[down]: # { .navigate-down }
[arrowdown]: images/arrow.png "Down arrow" { width=178px height=238px }

## Basement Level 1
Press down or up to navigate.

## Basement Level 2

Use `columns` to put blocks next to each other:

~ Begin Columns
~ Column { width=50% }
A monarch butterfly (as shown in Figure [#fig-bfly])
spends the winter in Mexico.
~
~ Column
~~ Figure { #fig-bfly caption="A monarch" }
![butterfly]
~~
~
~ End Columns

[butterfly]: images/butterfly.png "A Monarch butterfly" { width=280px vertical-align=middle }


<!-- 
For local background images, we need to have a reference to the image
such that it's data gets embedded into the HTML page. We define
it using "display=none" so it is hidden in the presentation. 
We can then refer to the image in "data-background-image". 
-->

![bfly]
[bfly]: images/butterfly.png "Butterfly" { display=none }

## Basement Level 3 { data-background-image=images/butterfly.png }
That's it, time to go back up.

[![arrowup]][back2]

[arrowup]:  images/arrow.png "Up arrow" { width="178px" height="238px" transform="rotate(180deg)" }
[back2]:    #vertical { .image }

~ End Vertical


## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)



## Pauses?

Some pauses.

* {.fragment} One
* {.fragment} Two
* {.fragment} Three

And more:

- Test 1
- Test 2
- Test 3
{.fragmented}

Cool!.

~ Slide
A slide with no header
~


## Point of View

In Reveal.js Press **ESC** to enter the slide overview.

Hold down alt and click on any element to zoom in on it using 
 [zoom.js]. Alt + click anywhere to zoom back out.


[zoom.js]: http://lab.hakim.se/zoom-js


## Works in Mobile Safari

Try it out! You can swipe through the slides and pinch your way to the
overview.


## Printing

You can print a `revealjs` presentation nicely from the browser.

First give the `?print-pdf` or `?print-paper` query on your final
presentation (in the browser address bar) and then print from the Chrome
browser selecting `Save to PDF`.

Read more about it at the [revealjs documentation](https://github.com/hakimel/reveal.js#pdf-export)

## RevealJS library

Normally, the `revealjs` library is loaded from a CDN but you can specify your
own url using metadata:

    Reveal Url: <my url>

This can be useful when using a [server to run revealjs](https://github.com/hakimel/reveal.js#full-setup)
where you may use something like:

    @nopreview Reveal Url: http://localhost:8000/reveal.js


## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
