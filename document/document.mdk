[INCLUDE=presentation]
Title         : Powtórka tematów z AiSDu
Sub Title     : Szybki review
Author        : Damian Trojnar
Affiliation   : UWr
Email         : trojnar.damian@gmail.com
Reveal Theme  : solarized
Beamer Theme  : singapore

[TITLE]

# Materiał

[TOC]

##Kopiec:
* [Definicja](https://pl.wikipedia.org/wiki/Kopiec_(informatyka).
* Procedury przywracające porządek kopcowy: 
  * Insert - wstaw na koniec, przywracaj porzadek do góry
  * Delete-min - wywal, wstaw z końca, przywracaj w dół
* Zastosowania: 
 * [heapsort](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/MIT6_006F11_lec04.pdf)
 * [kolejka priorytetowa](https://pl.wikipedia.org/wiki/Kolejka_priorytetowa)
 * [Podwójna kolejka priorytetowa](https://en.wikipedia.org/wiki/Min-max_heap)
 
[Succinct explaination](http://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html)

[Other good presentation](http://courses.cs.washington.edu/courses/cse373/06sp/handouts/lecture10.pdf)

[Budowanie w O(n)](http://www.cs.umd.edu/~meesh/351/mount/lectures/lect14-heapsort-analysis-part.pdf)

## Algorytmy zachłanne:

* [Rozmienianie pieniędzy.](https://crypto.stanford.edu/~zhandry/2012-Summer-CS161/docs/lectures/06-Greedy-1.pdf) 
 * [Optimal Bounds for the ChangeMaking
Problem](http://www.cs.cornell.edu/~kozen/papers/change.pdf)
* [Algorytmy dla problemu MST:](https://www.ics.uci.edu/~eppstein/161/960206.html) 
 * Algorytm Prima - dolaczaj najmniejsza
 * Algorytm Kruskala - posortuj i bierz
 * Algorytm Boruvki - buduj coraz wieksze mst jak w primie tyle naraz wszsytkie
* [Problem pokrycia zbioru](http://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf)
 * [Algorytm O(logn ) aproksymacyjny](http://www.cs.cmu.edu/~avrim/451f12/lectures/lect1106.pdf) 

## Dziel i zwyciezaj

* Master Theorem 
* Sortowanie metodą dziel i zwyciężaj: 
 * sortowanie przez scalanie 
 * Quicksort 
 * Mnożenie wielkich liczb - kruskal 
* Sieć  permutacyjna Waksmana-Benesa
* Znajdowanie najbliższej pary punktów na płaszczyźnie.

## Programowanie dynamiczne

* Obliczanie współczynnika dwumianowego.
* Przejście przez tablicę kwadratową.
* Najdłuższy wspólny podciąg.
* Wyznaczanie kolejności mnożenia macierzy.
* Algorytmy pseudowielomanowe dla problemów plecakowych
* Przynależność słowa do języka bezkontekstowego.
* Drzewa rozpinające drabin.

## Dolne granice
* Drzewa decyzyjne. 
  * Problem: sortowanie; dolna granica w najgorszym i średnim przypadku.
* liniowe drzewa decyzyjne:  
 * problem: niepowtarzalność elementów  
* redukcje  
* gra z adwersarzem
* jednoczesne znajdowane minimum i maksimum 

## Quicksort

* metody wyboru pivota
  * deterministyczna
  * losowa
  * mediana z małej próbki 
* analiza oczekiwanego czasu działania przy losowym pivocie;  
* usprawnienia Quicksorta
 * trójpodział
 * eliminacja rekursji
 * „quicksort w miejscu”
* QuickHeapsort 

## Sortowane szczególnych danych:  
* sortowanie przez zliczanie,  
* sortowanie kubełkowe,  
* sortowanie leksykograficzne ciągów jednakowej długości,  
* sortowanie leksykograficzne ciągów niekoniecznie jednakowej długości  
 * zastosowanie: izomorfizm ukorzenionych drzew
 

## Drzewa zbalansowane.
* AVL
* czerwono-czarne
* B-drzewa
* 1-2-3 drzewa

## Drzewa AVL 
* definicja - BST z max roznica wysokosci 1 w kazdym wezle  
* ograniczenie na wysokość - ?
* realizacja operacji słownikowych 
 * wstawiamy jak w BST
 * rotujemy(zig, zig-zig, zig-zag - nie zmieniaja preorder) 

## Drzewa czerwono-czarne  
* definicja - BST z czerwonymi lub czarnymi wierzcholkami
 * root jest czarny
 * lisc jest czarny
 * czerwony ma tylko czarnych synów :/
 * na każdej scieżce od roota do liścia jest tyle samo czarnych
* ograniczenie na wysokość - ?
* realizacja operacji słownikowych.    

## B-drzewa.  
* definicja
* liczba operacji i/o jako miara złożoności
* realizacja operacji słownikowych

## 1-2-3 drzewa 
* związek w drzewami czerwono czarnymi 

## [Kopce dwumianowe](http://iair.mchtr.pw.edu.pl/~bputz/aisd_cpp/lekcja6/segment3/main.htm)

* Specificzna struktura - porównanie do zapisu binarnego
* Lista kopców - każdy ma mieć różny stopień roota
* Zastosowanie: Zlączalne kolejki priorytetowe
* Analiza kosztu:
 * Wstawianie: 
 * Usuwanie:
 * Descrease-key
 * extract-min:

~ Begin Vertical

## [Kopce Fibonacciego](http://wazniak.mimuw.edu.pl/index.php?title=Algorytmy_i_struktury_danych/Kolejki_priorytetowe)
* Inaczej leniwe kopce dwumianowe - tylko po extract-min zachowuja różne stopnie korzenia
* Zastosowanie: Szybkie descrease-key - Dijkstra
* Analiza kosztu (w dól)

## Kopce fibonnaciego
### Wstawianie:
  * ?

## Kopce fibonnaciego
### Usuwanie:
  * ?

## Kopce fibonnaciego
### Descrease-key
  * jak zaburzy kopiec to zmien rodzica na czarnego
  * Jak jest rodzic czarny to odetnij siebie i odetnij rodzica rekurencyjnie

## Kopce fibonnacigo
### extract-min:
  * usuwamy min - wrzucamy dzieci na lisle korzeni
  * sprzatamy, aby bylo po jednym danego stopnia
  
~ End Vertical

## Hashowanie
* Przyklady funkcji haszujacych
* Kolizje
 * nawlekanie
 * adresowanie otwarte
   * metoda liniowa
   * metoda kwadratowa
   * podwójne hashowanie
* Oczekiwana liczba prób przy poszukiwaniu elementu
* Uniwersalne rodziny funkcji haszujacych

* Słownik statyczny
* Dwupoziomowa konstrukcja(?)  
* Istnienie odpowiednich fukcji haszujacych

## [Union-Find](https://www.cs.princeton.edu/~rs/AlgsDS07/01UnionFind.pdf)

* Problem:
 * Dane: Podzbiory
 * Pytanie: Czy dwa elementy należą do tego samego podzbioru?
 * n elementow, m operacji(find lub union)
* Quick-find (zmieniaj wszystkim) - MN
* Quick-union (przepnij przedstawiciela subsetu) -MN
* Weighted-quick-union(pamietaj rozmiar, mniejsze do wiekszego) - Mlog(N)
* Path-compression(przy findzie recursive przepinka roota)- N + Mlog*(N)
 * [log*(n)](https://en.wikipedia.org/wiki/Iterated_logarithm) - jest stała w tym wszechświecie

* NOTE: prosty algorytm, ale dowód jest trudny


## Drzewa splay.

* Struktury samoorganizujące się - idea.
* Heurystyki dla list samoorganizujących się.
* Drzewa rozchylane (splay trees). 
* Operacja splay. 
* Analiza zamortyzowana ciągów operacji splay. 

## Drzewce

BST z randomami urzymujacymi własność kopca :)

* Definicja. 
* Losowe drzewce.
* Operacje słownikowe na drzewcach. 
* Oczekiwany koszt operacji słownikowych na drzewcach losowych.

~ Begin Vertical

## Wyszukiwanie wzorców

N dlugosc teskstu, M dlugosc wzorca

* Algorytm naiwny. 
* Wyszukiwanie wzorców automatem skończonym. 
* Algorytm Karpa-Rabina. 
* Algorytm KMP (Knutha-Morrisa-Pratta). 
* Algorytm Boyera-Moore’a. 
* Algorytm Shift-And.

### Ciśniemy w dół

## Algorytm naiwny. 

Oh, comeone :)

## Wyszukiwanie wzorców automatem skończonym. 

* Tabela wzorzec * alfabet
* Wypelnij stany przejsc:
 * TODO: jak to bylo dokladnie?

## [Algorytm Karpa-Rabina](http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/)

* Korzysta z latwo obliczalnej funkcji hashujacej
 * latwo - obliczana w czasie stalym na podstawie poprzedniej
 * np. zamiana liter na liczby (div 10 >> * 10 >> + next)
* Oblicza te hashe w O(N)
* Przelatuje w N jak napotka to robi naive matching
* Worst case: (N-M)*M
* Ave: Linear

## [Algorytm KMP](http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/)

* Oblicz najdluzszy prefixosufix dla wzorca ropoczynajac od drugiej litery
* Wykorzystaj to by sobie troche poskakac :)
 * TODO: jak to konkretnie dziala?

## Algorytm Boyera-Moore’a. 

* matchuje od dupy strony
* Dwie heury:
 * good prefix
   * ?
 * bad sufix
   * podciagaj w prawo az sie jakas litera bedzie zgadzac
* Zlozonosc: ?

## [Algorytm Shift-And](http://videlalvaro.github.io/2014/01/shift-and-visualization.html)

Spoko jest ta prezka w nagłówku

* Bitmaska D - do sledzenia pokrycia
* Dla kazdej litery alfabetu tworzymy bitmaske(b) o dlugosci wzorca
 * 1 tam gdzie wystepuje we wzorcu
* Lecimy literka po literce po tekscie
* Cały trick to to:
```
d = ((d << 1) | 1) & (b[text.charAt(i)] | 0);
```
* Sprawdzamy lub Resetujemy:
```
matched = (d & matchMask), gdzie matchMask = 1 << paternLength-1;
```

~ End Vertical